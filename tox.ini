# Can be run through "tox.sh" for convenience

[tox]
# Required for `tox -p auto` to work; here's the commit we're after:
# https://github.com/tox-dev/tox/pull/1202
minversion = 3.8.0

mypy_version = 1.2.0
ruff_version = 0.1.3
pytest_version = 7.1.3
setuptools_version = 44.1.1

envlist=
    version.py
    ruff-format
    mypy
    ruff-check
    shellcheck
    installtest
    pytest
    package, test-package
    test-wheel

[testenv]
skip_install = true
basepython = python3
allowlist_externals = /bin/bash

[testenv:version.py]
deps =
    setuptools == {[tox]setuptools_version}
commands =
    # This creates px/version.py
    /bin/bash -c './setup.py check'

[testenv:ruff-format]
deps =
    ruff=={[tox]ruff_version}

# Format locally, check in CI and fail on not-formatted code
commands = /bin/bash -c 'if [ "{env:CI:}" ] ; then CHECK="--check --diff" ; fi ;  ruff format $CHECK ./*.py ./*/*.py'

[testenv:mypy]
# NOTE: In theory mypy should probably depend on ruff-format to get line numbers
# in any error messages right. But since mypy tends to finish last, and being a
# bit off isn't the end of the world, let's not depend on ruff-format for now
# and hope nobody notices.
depends = version.py

deps =
    mypy=={[tox]mypy_version}
    pytest=={[tox]pytest_version}
    types-setuptools==67.7.0.1  # Matches what was on Johan's laptop 2023-05-08
    types-python-dateutil==2.8.19
commands =
    /bin/bash -c 'mypy --pretty ./*.py ./*/*.py'

[testenv:ruff-check]
# Depend on ruff-format to not complain about formatting errors
depends = version.py, ruff-format

deps =
    ruff=={[tox]ruff_version}
    pytest=={[tox]pytest_version}
    -r requirements.txt

# Auto-fix locally but not in CI
commands =
    /bin/bash -c 'FIX="--fix" ; if [ "{env:CI:}" ] ; then FIX="--no-fix" ; fi ;  ruff check $FIX ./*.py ./*/*.py'

[testenv:shellcheck]
commands =
    /bin/bash -c 'shellcheck ./*.sh ./*/*.sh'

[testenv:installtest]
allowlist_externals = {toxinidir}/tests/installtest.sh
commands =
    {toxinidir}/tests/installtest.sh

[testenv:pytest]
depends = version.py ruff-format
deps =
    pytest == {[tox]pytest_version}
    pytest-avoidance == 0.3.0
    -r requirements.txt
commands =
    pytest --durations=10 --color=yes tests

[testenv:package]
# Create {toxinidir}/px.pex
depends = version.py ruff-format
allowlist_externals = {toxinidir}/devbin/make-executable-zip.sh
deps =
    # Used by the make-executable-zip.sh script
    virtualenv
commands =
    {toxinidir}/devbin/make-executable-zip.sh

[testenv:test-package]
depends = package
commands =
    # Verify we have the correct shebang
    /bin/bash -c 'head -n1 {toxinidir}/px.pex | grep -Eq "^\#!/usr/bin/env python3$"'
    # Test that there are no natively compiled dependencies. They make
    # distribution a lot harder. If this triggers, fix your dependencies!
    /bin/bash -c '! unzip -qq -l "{toxinidir}/px.pex" "*.so"'
    # Run pex and ensure it doesn't fail
    python -Werror {toxinidir}/px.pex
    # Test version string vs git
    /bin/bash -x -c 'test "$("{toxinidir}/px.pex" --version)" = "$(git describe --dirty)"'

[testenv:test-wheel]
# Test installing using pip
depends = version.py ruff-format
allowlist_externals =
    /bin/bash
    /bin/rm
deps =
    setuptools == {[tox]setuptools_version}
    wheel == 0.35.1
commands =
    # clean up build/ and dist/ folders
    /bin/rm -rf build dist
    python setup.py clean --all
    # build wheel
    /bin/rm -rf dist
    python setup.py bdist_wheel --bdist-dir {toxinidir}/bdist --dist-dir {toxinidir}/dist
    # Start testing it
    /bin/bash -c "pip uninstall --yes pxpx"
    /bin/bash -c "pip install {toxinidir}/dist/pxpx-*.whl"
    # Verify we can run the px we just installed using pip
    px tox
    # Test version string vs git
    /bin/bash -x -c 'test "$(px --version)" = "$(git describe --dirty)"'
